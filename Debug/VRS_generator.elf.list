
VRS_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f14  08000f1c  00010f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000f14  08000f14  00010f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  20000000  08000f1c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000003c  08000f1c  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010f1c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000321a  00000000  00000000  00010f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000db5  00000000  00000000  0001415f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004a0  00000000  00000000  00014f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  000153b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001ce8  00000000  00000000  000157b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000016e1  00000000  00000000  00017498  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00018b79  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001144  00000000  00000000  00018bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00019d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	08000efc 	.word	0x08000efc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	08000efc 	.word	0x08000efc

0800017c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	230f      	movs	r3, #15
 800018e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	78db      	ldrb	r3, [r3, #3]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d038      	beq.n	800020a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <NVIC_Init+0xb8>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	43db      	mvns	r3, r3
 800019e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001a2:	0a1b      	lsrs	r3, r3, #8
 80001a4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	f1c3 0304 	rsb	r3, r3, #4
 80001ac:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001ae:	7b7a      	ldrb	r2, [r7, #13]
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	fa42 f303 	asr.w	r3, r2, r3
 80001b6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	461a      	mov	r2, r3
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	789a      	ldrb	r2, [r3, #2]
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	4013      	ands	r3, r2
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	4313      	orrs	r3, r2
 80001d4:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001d6:	7bfb      	ldrb	r3, [r7, #15]
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <NVIC_Init+0xbc>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	7bfa      	ldrb	r2, [r7, #15]
 80001e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <NVIC_Init+0xbc>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	095b      	lsrs	r3, r3, #5
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	f003 031f 	and.w	r3, r3, #31
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000208:	e00f      	b.n	800022a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <NVIC_Init+0xbc>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	095b      	lsrs	r3, r3, #5
 8000212:	b2db      	uxtb	r3, r3
 8000214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	f003 031f 	and.w	r3, r3, #31
 800021e:	2201      	movs	r2, #1
 8000220:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000222:	f100 0320 	add.w	r3, r0, #32
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	e000e100 	.word	0xe000e100

0800023c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000248:	4b34      	ldr	r3, [pc, #208]	; (800031c <EXTI_Init+0xe0>)
 800024a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	799b      	ldrb	r3, [r3, #6]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d04f      	beq.n	80002f4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000254:	4931      	ldr	r1, [pc, #196]	; (800031c <EXTI_Init+0xe0>)
 8000256:	4b31      	ldr	r3, [pc, #196]	; (800031c <EXTI_Init+0xe0>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	43db      	mvns	r3, r3
 8000260:	4013      	ands	r3, r2
 8000262:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000264:	492d      	ldr	r1, [pc, #180]	; (800031c <EXTI_Init+0xe0>)
 8000266:	4b2d      	ldr	r3, [pc, #180]	; (800031c <EXTI_Init+0xe0>)
 8000268:	685a      	ldr	r2, [r3, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	43db      	mvns	r3, r3
 8000270:	4013      	ands	r3, r2
 8000272:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	791b      	ldrb	r3, [r3, #4]
 8000278:	461a      	mov	r2, r3
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4413      	add	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	6811      	ldr	r1, [r2, #0]
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	6812      	ldr	r2, [r2, #0]
 800028a:	430a      	orrs	r2, r1
 800028c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800028e:	4923      	ldr	r1, [pc, #140]	; (800031c <EXTI_Init+0xe0>)
 8000290:	4b22      	ldr	r3, [pc, #136]	; (800031c <EXTI_Init+0xe0>)
 8000292:	689a      	ldr	r2, [r3, #8]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	43db      	mvns	r3, r3
 800029a:	4013      	ands	r3, r2
 800029c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800029e:	491f      	ldr	r1, [pc, #124]	; (800031c <EXTI_Init+0xe0>)
 80002a0:	4b1e      	ldr	r3, [pc, #120]	; (800031c <EXTI_Init+0xe0>)
 80002a2:	68da      	ldr	r2, [r3, #12]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	43db      	mvns	r3, r3
 80002aa:	4013      	ands	r3, r2
 80002ac:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	795b      	ldrb	r3, [r3, #5]
 80002b2:	2b10      	cmp	r3, #16
 80002b4:	d10e      	bne.n	80002d4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80002b6:	4919      	ldr	r1, [pc, #100]	; (800031c <EXTI_Init+0xe0>)
 80002b8:	4b18      	ldr	r3, [pc, #96]	; (800031c <EXTI_Init+0xe0>)
 80002ba:	689a      	ldr	r2, [r3, #8]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80002c4:	4915      	ldr	r1, [pc, #84]	; (800031c <EXTI_Init+0xe0>)
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <EXTI_Init+0xe0>)
 80002c8:	68da      	ldr	r2, [r3, #12]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4313      	orrs	r3, r2
 80002d0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002d2:	e01d      	b.n	8000310 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <EXTI_Init+0xe0>)
 80002d6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	795b      	ldrb	r3, [r3, #5]
 80002dc:	461a      	mov	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	4413      	add	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	6811      	ldr	r1, [r2, #0]
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	6812      	ldr	r2, [r2, #0]
 80002ee:	430a      	orrs	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002f2:	e00d      	b.n	8000310 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	791b      	ldrb	r3, [r3, #4]
 80002f8:	461a      	mov	r2, r3
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	4413      	add	r3, r2
 80002fe:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	6811      	ldr	r1, [r2, #0]
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	43d2      	mvns	r2, r2
 800030c:	400a      	ands	r2, r1
 800030e:	601a      	str	r2, [r3, #0]
  }
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400

08000320 <EXTI_GetITStatus>:
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000328:	2300      	movs	r3, #0
 800032a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <EXTI_GetITStatus+0x44>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4013      	ands	r3, r2
 8000338:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <EXTI_GetITStatus+0x44>)
 800033c:	695a      	ldr	r2, [r3, #20]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4013      	ands	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	d005      	beq.n	8000352 <EXTI_GetITStatus+0x32>
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800034c:	2301      	movs	r3, #1
 800034e:	73fb      	strb	r3, [r7, #15]
 8000350:	e001      	b.n	8000356 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000356:	7bfb      	ldrb	r3, [r7, #15]
}
 8000358:	4618      	mov	r0, r3
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400

08000368 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000370:	4a03      	ldr	r2, [pc, #12]	; (8000380 <EXTI_ClearITPendingBit+0x18>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	6153      	str	r3, [r2, #20]
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40010400 	.word	0x40010400

08000384 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000384:	b480      	push	{r7}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	e07e      	b.n	800049e <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003a0:	2201      	movs	r2, #1
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	fa02 f303 	lsl.w	r3, r2, r3
 80003a8:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	4013      	ands	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d16d      	bne.n	8000498 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	2103      	movs	r1, #3
 80003c6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ca:	43db      	mvns	r3, r3
 80003cc:	401a      	ands	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	4619      	mov	r1, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d003      	beq.n	80003fa <GPIO_Init+0x76>
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d136      	bne.n	8000468 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689a      	ldr	r2, [r3, #8]
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	2103      	movs	r1, #3
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	4619      	mov	r1, r3
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	431a      	orrs	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	889b      	ldrh	r3, [r3, #4]
 800042c:	b29a      	uxth	r2, r3
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	b29b      	uxth	r3, r3
 8000432:	2101      	movs	r1, #1
 8000434:	fa01 f303 	lsl.w	r3, r1, r3
 8000438:	b29b      	uxth	r3, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	b29b      	uxth	r3, r3
 800043e:	4013      	ands	r3, r2
 8000440:	b29a      	uxth	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	889b      	ldrh	r3, [r3, #4]
 800044a:	b29b      	uxth	r3, r3
 800044c:	b21a      	sxth	r2, r3
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	799b      	ldrb	r3, [r3, #6]
 8000452:	4619      	mov	r1, r3
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	b29b      	uxth	r3, r3
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	b21b      	sxth	r3, r3
 800045e:	4313      	orrs	r3, r2
 8000460:	b21b      	sxth	r3, r3
 8000462:	b29a      	uxth	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	68da      	ldr	r2, [r3, #12]
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	b29b      	uxth	r3, r3
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	2103      	movs	r1, #3
 8000474:	fa01 f303 	lsl.w	r3, r1, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	401a      	ands	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68da      	ldr	r2, [r3, #12]
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	79db      	ldrb	r3, [r3, #7]
 8000488:	4619      	mov	r1, r3
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	431a      	orrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	3301      	adds	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	2b0f      	cmp	r3, #15
 80004a2:	f67f af7d 	bls.w	80003a0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80004a6:	bf00      	nop
 80004a8:	371c      	adds	r7, #28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80004bc:	2300      	movs	r3, #0
 80004be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	8a1b      	ldrh	r3, [r3, #16]
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	887b      	ldrh	r3, [r7, #2]
 80004c8:	4013      	ands	r3, r2
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d002      	beq.n	80004d6 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80004d0:	2301      	movs	r3, #1
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e001      	b.n	80004da <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80004da:	7bfb      	ldrb	r3, [r7, #15]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	887a      	ldrh	r2, [r7, #2]
 80004f8:	831a      	strh	r2, [r3, #24]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	887a      	ldrh	r2, [r7, #2]
 8000514:	835a      	strh	r2, [r3, #26]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d006      	beq.n	8000540 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000532:	4909      	ldr	r1, [pc, #36]	; (8000558 <RCC_AHBPeriphClockCmd+0x38>)
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <RCC_AHBPeriphClockCmd+0x38>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800053e:	e006      	b.n	800054e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000540:	4905      	ldr	r1, [pc, #20]	; (8000558 <RCC_AHBPeriphClockCmd+0x38>)
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <RCC_AHBPeriphClockCmd+0x38>)
 8000544:	69da      	ldr	r2, [r3, #28]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	43db      	mvns	r3, r3
 800054a:	4013      	ands	r3, r2
 800054c:	61cb      	str	r3, [r1, #28]
  }
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40023800 	.word	0x40023800

0800055c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d006      	beq.n	800057c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800056e:	4909      	ldr	r1, [pc, #36]	; (8000594 <RCC_APB2PeriphClockCmd+0x38>)
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <RCC_APB2PeriphClockCmd+0x38>)
 8000572:	6a1a      	ldr	r2, [r3, #32]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800057a:	e006      	b.n	800058a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800057c:	4905      	ldr	r1, [pc, #20]	; (8000594 <RCC_APB2PeriphClockCmd+0x38>)
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <RCC_APB2PeriphClockCmd+0x38>)
 8000580:	6a1a      	ldr	r2, [r3, #32]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	43db      	mvns	r3, r3
 8000586:	4013      	ands	r3, r2
 8000588:	620b      	str	r3, [r1, #32]
  }
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40023800 	.word	0x40023800

08000598 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000598:	b490      	push	{r4, r7}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	f003 0303 	and.w	r3, r3, #3
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	220f      	movs	r2, #15
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80005bc:	4916      	ldr	r1, [pc, #88]	; (8000618 <SYSCFG_EXTILineConfig+0x80>)
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	089b      	lsrs	r3, r3, #2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	4618      	mov	r0, r3
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <SYSCFG_EXTILineConfig+0x80>)
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	089b      	lsrs	r3, r3, #2
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	3302      	adds	r3, #2
 80005d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	43db      	mvns	r3, r3
 80005d8:	401a      	ands	r2, r3
 80005da:	1c83      	adds	r3, r0, #2
 80005dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <SYSCFG_EXTILineConfig+0x80>)
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461c      	mov	r4, r3
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <SYSCFG_EXTILineConfig+0x80>)
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	089b      	lsrs	r3, r3, #2
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	3302      	adds	r3, #2
 80005f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f8:	79f9      	ldrb	r1, [r7, #7]
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	f003 0303 	and.w	r3, r3, #3
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	431a      	orrs	r2, r3
 8000608:	1ca3      	adds	r3, r4, #2
 800060a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bc90      	pop	{r4, r7}
 8000616:	4770      	bx	lr
 8000618:	40010000 	.word	0x40010000

0800061c <DisplayInit>:
#define D5 				GPIO_Pin_5
#define D6 				GPIO_Pin_3
#define D7 				GPIO_Pin_9

void DisplayInit(void) 		//inicializacia displeja
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);			//GPIOB clock enable
 8000622:	2101      	movs	r1, #1
 8000624:	2002      	movs	r0, #2
 8000626:	f7ff ff7b 	bl	8000520 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;						//GPIOB inicializacia
	GPIO_InitStructure.GPIO_Pin   = RS | E | D4 | D5 | D6 | D7;
 800062a:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 800062e:	603b      	str	r3, [r7, #0]
	GPIO_ResetBits(LCD_Port, RS | E | D4 | D5 | D6 | D7);
 8000630:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 8000634:	4818      	ldr	r0, [pc, #96]	; (8000698 <DisplayInit+0x7c>)
 8000636:	f7ff ff65 	bl	8000504 <GPIO_ResetBits>
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800063a:	2301      	movs	r3, #1
 800063c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800063e:	2300      	movs	r3, #0
 8000640:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000642:	2302      	movs	r3, #2
 8000644:	717b      	strb	r3, [r7, #5]
	GPIO_Init(LCD_Port, &GPIO_InitStructure);
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	4813      	ldr	r0, [pc, #76]	; (8000698 <DisplayInit+0x7c>)
 800064c:	f7ff fe9a 	bl	8000384 <GPIO_Init>

	GPIO_ResetBits(LCD_Port, RS | E | D4 | D5 | D6 | D7);
 8000650:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 8000654:	4810      	ldr	r0, [pc, #64]	; (8000698 <DisplayInit+0x7c>)
 8000656:	f7ff ff55 	bl	8000504 <GPIO_ResetBits>
	Delay(0xffff);
 800065a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800065e:	f000 fa25 	bl	8000aac <Delay>
	SendCMD(0x02);
 8000662:	2002      	movs	r0, #2
 8000664:	f000 f904 	bl	8000870 <SendCMD>
	Delay(0x3FFFC);  //pockaj 20ms
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <DisplayInit+0x80>)
 800066a:	f000 fa1f 	bl	8000aac <Delay>
	SendCMD(0x28);  //konfiguracia LCD
 800066e:	2028      	movs	r0, #40	; 0x28
 8000670:	f000 f8fe 	bl	8000870 <SendCMD>
	SendCMD(0x06);
 8000674:	2006      	movs	r0, #6
 8000676:	f000 f8fb 	bl	8000870 <SendCMD>
	SendCMD(0x01);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f8f8 	bl	8000870 <SendCMD>
	SendCMD(0x0E);
 8000680:	200e      	movs	r0, #14
 8000682:	f000 f8f5 	bl	8000870 <SendCMD>
	Delay(0xffff);
 8000686:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800068a:	f000 fa0f 	bl	8000aac <Delay>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020400 	.word	0x40020400
 800069c:	0003fffc 	.word	0x0003fffc

080006a0 <DisplayFrequency>:
	if (Waveform == 1) PrintString("trojuholnik");
	if (Waveform == 2) PrintString("obdlznik");
}

void DisplayFrequency(uint16_t Frequency)	//zobrazenie frekvencie
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	uint16_t pom;
	if (Frequency > 999) CursorPosition(1,2);
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b0:	d303      	bcc.n	80006ba <DisplayFrequency+0x1a>
 80006b2:	2102      	movs	r1, #2
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f93f 	bl	8000938 <CursorPosition>
	if (Frequency < 1000) CursorPosition(2,2);
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006c0:	d203      	bcs.n	80006ca <DisplayFrequency+0x2a>
 80006c2:	2102      	movs	r1, #2
 80006c4:	2002      	movs	r0, #2
 80006c6:	f000 f937 	bl	8000938 <CursorPosition>
	if (Frequency < 100) CursorPosition(3,2);
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	2b63      	cmp	r3, #99	; 0x63
 80006ce:	d803      	bhi.n	80006d8 <DisplayFrequency+0x38>
 80006d0:	2102      	movs	r1, #2
 80006d2:	2003      	movs	r0, #3
 80006d4:	f000 f930 	bl	8000938 <CursorPosition>
	pom=Frequency/10;
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <DisplayFrequency+0x88>)
 80006dc:	fba2 2303 	umull	r2, r3, r2, r3
 80006e0:	08db      	lsrs	r3, r3, #3
 80006e2:	81fb      	strh	r3, [r7, #14]
	PrintString(num2text(pom));
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f940 	bl	800096c <num2text>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f906 	bl	8000900 <PrintString>
	PrintChar('.');
 80006f4:	202e      	movs	r0, #46	; 0x2e
 80006f6:	f000 f8d7 	bl	80008a8 <PrintChar>
	pom=Frequency%10;
 80006fa:	88fa      	ldrh	r2, [r7, #6]
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <DisplayFrequency+0x88>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	08d9      	lsrs	r1, r3, #3
 8000704:	460b      	mov	r3, r1
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81fb      	strh	r3, [r7, #14]
	PrintString(num2text(pom));
 8000710:	89fb      	ldrh	r3, [r7, #14]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f92a 	bl	800096c <num2text>
 8000718:	4603      	mov	r3, r0
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f8f0 	bl	8000900 <PrintString>
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	cccccccd 	.word	0xcccccccd

0800072c <strobeEN>:
	if (Unit == 1) PrintChar('k');
	if (Unit == 2) PrintChar('M');
	PrintString("Hz");
}

void strobeEN(void) {	//generacia hodinoveho signalu
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	Delay(0x3ff);
 8000730:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8000734:	f000 f9ba 	bl	8000aac <Delay>
	GPIO_SetBits(LCD_Port, E);
 8000738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073c:	4806      	ldr	r0, [pc, #24]	; (8000758 <strobeEN+0x2c>)
 800073e:	f7ff fed3 	bl	80004e8 <GPIO_SetBits>
	Delay(0x3ff);
 8000742:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8000746:	f000 f9b1 	bl	8000aac <Delay>
	GPIO_ResetBits(LCD_Port, E);
 800074a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074e:	4802      	ldr	r0, [pc, #8]	; (8000758 <strobeEN+0x2c>)
 8000750:	f7ff fed8 	bl	8000504 <GPIO_ResetBits>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40020400 	.word	0x40020400

0800075c <upNib>:

void upNib(uint8_t c) {	//nastavenie hornych 4 bitov
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	if(c & 0x80)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	da05      	bge.n	800077a <upNib+0x1e>
		GPIO_SetBits(LCD_Port, D7);
 800076e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000772:	481b      	ldr	r0, [pc, #108]	; (80007e0 <upNib+0x84>)
 8000774:	f7ff feb8 	bl	80004e8 <GPIO_SetBits>
 8000778:	e004      	b.n	8000784 <upNib+0x28>
	else
		GPIO_ResetBits(LCD_Port, D7);
 800077a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077e:	4818      	ldr	r0, [pc, #96]	; (80007e0 <upNib+0x84>)
 8000780:	f7ff fec0 	bl	8000504 <GPIO_ResetBits>
	if(c & 0x40)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078a:	2b00      	cmp	r3, #0
 800078c:	d004      	beq.n	8000798 <upNib+0x3c>
		GPIO_SetBits(LCD_Port, D6);
 800078e:	2108      	movs	r1, #8
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <upNib+0x84>)
 8000792:	f7ff fea9 	bl	80004e8 <GPIO_SetBits>
 8000796:	e003      	b.n	80007a0 <upNib+0x44>
	else
		GPIO_ResetBits(LCD_Port, D6);
 8000798:	2108      	movs	r1, #8
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <upNib+0x84>)
 800079c:	f7ff feb2 	bl	8000504 <GPIO_ResetBits>
	if(c & 0x20)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 0320 	and.w	r3, r3, #32
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <upNib+0x58>
		GPIO_SetBits(LCD_Port, D5);
 80007aa:	2120      	movs	r1, #32
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <upNib+0x84>)
 80007ae:	f7ff fe9b 	bl	80004e8 <GPIO_SetBits>
 80007b2:	e003      	b.n	80007bc <upNib+0x60>
	else
		GPIO_ResetBits(LCD_Port, D5);
 80007b4:	2120      	movs	r1, #32
 80007b6:	480a      	ldr	r0, [pc, #40]	; (80007e0 <upNib+0x84>)
 80007b8:	f7ff fea4 	bl	8000504 <GPIO_ResetBits>
	if(c & 0x10)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <upNib+0x74>
		GPIO_SetBits(LCD_Port, D4);
 80007c6:	2110      	movs	r1, #16
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <upNib+0x84>)
 80007ca:	f7ff fe8d 	bl	80004e8 <GPIO_SetBits>
	else
		GPIO_ResetBits(LCD_Port, D4);
}
 80007ce:	e003      	b.n	80007d8 <upNib+0x7c>
	else
		GPIO_ResetBits(LCD_Port, D5);
	if(c & 0x10)
		GPIO_SetBits(LCD_Port, D4);
	else
		GPIO_ResetBits(LCD_Port, D4);
 80007d0:	2110      	movs	r1, #16
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <upNib+0x84>)
 80007d4:	f7ff fe96 	bl	8000504 <GPIO_ResetBits>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020400 	.word	0x40020400

080007e4 <downNib>:

void downNib(uint8_t c) {	//nastavenie dolnych 4 bitov
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	if(c & 0x8)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d005      	beq.n	8000804 <downNib+0x20>
		GPIO_SetBits(LCD_Port, D7);
 80007f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fc:	481b      	ldr	r0, [pc, #108]	; (800086c <downNib+0x88>)
 80007fe:	f7ff fe73 	bl	80004e8 <GPIO_SetBits>
 8000802:	e004      	b.n	800080e <downNib+0x2a>
	else
		GPIO_ResetBits(LCD_Port, D7);
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <downNib+0x88>)
 800080a:	f7ff fe7b 	bl	8000504 <GPIO_ResetBits>
	if(c & 0x4)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	2b00      	cmp	r3, #0
 8000816:	d004      	beq.n	8000822 <downNib+0x3e>
		GPIO_SetBits(LCD_Port, D6);
 8000818:	2108      	movs	r1, #8
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <downNib+0x88>)
 800081c:	f7ff fe64 	bl	80004e8 <GPIO_SetBits>
 8000820:	e003      	b.n	800082a <downNib+0x46>
	else
		GPIO_ResetBits(LCD_Port, D6);
 8000822:	2108      	movs	r1, #8
 8000824:	4811      	ldr	r0, [pc, #68]	; (800086c <downNib+0x88>)
 8000826:	f7ff fe6d 	bl	8000504 <GPIO_ResetBits>
	if(c & 0x2)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d004      	beq.n	800083e <downNib+0x5a>
		GPIO_SetBits(LCD_Port, D5);
 8000834:	2120      	movs	r1, #32
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <downNib+0x88>)
 8000838:	f7ff fe56 	bl	80004e8 <GPIO_SetBits>
 800083c:	e003      	b.n	8000846 <downNib+0x62>
	else
		GPIO_ResetBits(LCD_Port, D5);
 800083e:	2120      	movs	r1, #32
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <downNib+0x88>)
 8000842:	f7ff fe5f 	bl	8000504 <GPIO_ResetBits>
	if(c & 0x1)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d004      	beq.n	800085a <downNib+0x76>
		GPIO_SetBits(LCD_Port, D4);
 8000850:	2110      	movs	r1, #16
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <downNib+0x88>)
 8000854:	f7ff fe48 	bl	80004e8 <GPIO_SetBits>
	else
		GPIO_ResetBits(LCD_Port, D4);
}
 8000858:	e003      	b.n	8000862 <downNib+0x7e>
	else
		GPIO_ResetBits(LCD_Port, D5);
	if(c & 0x1)
		GPIO_SetBits(LCD_Port, D4);
	else
		GPIO_ResetBits(LCD_Port, D4);
 800085a:	2110      	movs	r1, #16
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <downNib+0x88>)
 800085e:	f7ff fe51 	bl	8000504 <GPIO_ResetBits>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40020400 	.word	0x40020400

08000870 <SendCMD>:

void SendCMD(uint8_t c) {	//odoslanie prikazu
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	GPIO_ResetBits(LCD_Port, RS);
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <SendCMD+0x34>)
 8000880:	f7ff fe40 	bl	8000504 <GPIO_ResetBits>
	upNib(c);
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff68 	bl	800075c <upNib>
	strobeEN();
 800088c:	f7ff ff4e 	bl	800072c <strobeEN>
	downNib(c);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffa6 	bl	80007e4 <downNib>
	strobeEN();
 8000898:	f7ff ff48 	bl	800072c <strobeEN>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40020400 	.word	0x40020400

080008a8 <PrintChar>:

void PrintChar(uint8_t c) {	//zobrazenie znaku
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	if(((c>=0x20)&&(c<=0x7F)) || ((c>=0xA0)&&(c<=0xFF))) {	//check if 'c' is within display boundry
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b1f      	cmp	r3, #31
 80008b6:	d903      	bls.n	80008c0 <PrintChar+0x18>
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	da02      	bge.n	80008c6 <PrintChar+0x1e>
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b9f      	cmp	r3, #159	; 0x9f
 80008c4:	d915      	bls.n	80008f2 <PrintChar+0x4a>
		GPIO_SetBits(LCD_Port, RS);
 80008c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <PrintChar+0x54>)
 80008cc:	f7ff fe0c 	bl	80004e8 <GPIO_SetBits>
		upNib(c);
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff42 	bl	800075c <upNib>
		strobeEN();
 80008d8:	f7ff ff28 	bl	800072c <strobeEN>
		downNib(c);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff80 	bl	80007e4 <downNib>
		strobeEN();
 80008e4:	f7ff ff22 	bl	800072c <strobeEN>
		GPIO_ResetBits(LCD_Port, RS);
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <PrintChar+0x54>)
 80008ee:	f7ff fe09 	bl	8000504 <GPIO_ResetBits>
	}
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40020400 	.word	0x40020400

08000900 <PrintString>:

void PrintString(uint8_t *s) {	//zobrazenie retazca
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]
	//while (s[i] == '\0') i++;
	while(s[i] != '\0') {
 800090c:	e009      	b.n	8000922 <PrintString+0x22>
		PrintChar(s[i]);
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffc6 	bl	80008a8 <PrintChar>
		i++;
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	3301      	adds	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
}

void PrintString(uint8_t *s) {	//zobrazenie retazca
	uint8_t i=0;
	//while (s[i] == '\0') i++;
	while(s[i] != '\0') {
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1ef      	bne.n	800090e <PrintString+0xe>
		PrintChar(s[i]);
		i++;
	}
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop

08000938 <CursorPosition>:

void ClearDisplay(void) {	//vycistenie displeja
	SendCMD(0x01);
}

void CursorPosition(int col, int row){	//nastavenie pozicie kurzora
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	if (row == 1) col += 0x7F;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d102      	bne.n	800094e <CursorPosition+0x16>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	337f      	adds	r3, #127	; 0x7f
 800094c:	607b      	str	r3, [r7, #4]
	if (row == 2) col += 0xBF;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d102      	bne.n	800095a <CursorPosition+0x22>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	33bf      	adds	r3, #191	; 0xbf
 8000958:	607b      	str	r3, [r7, #4]
	SendCMD(col);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff86 	bl	8000870 <SendCMD>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <num2text>:

int num2text(uint16_t cislo) {		//premena cisla na text
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]

	static uint8_t i, j, k;
	static char text[16], pom;

	for (i=0;i<16;i++) text[i] = '\0';
 8000976:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <num2text+0x128>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	e00b      	b.n	8000996 <num2text+0x2a>
 800097e:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <num2text+0x128>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <num2text+0x12c>)
 8000986:	2100      	movs	r1, #0
 8000988:	5499      	strb	r1, [r3, r2]
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <num2text+0x128>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <num2text+0x128>)
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <num2text+0x128>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b0f      	cmp	r3, #15
 800099c:	d9ef      	bls.n	800097e <num2text+0x12>

	if (cislo == 0)	text[0] = '0';
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <num2text+0x3e>
 80009a4:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <num2text+0x12c>)
 80009a6:	2230      	movs	r2, #48	; 0x30
 80009a8:	701a      	strb	r2, [r3, #0]

	i = 15;
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <num2text+0x128>)
 80009ac:	220f      	movs	r2, #15
 80009ae:	701a      	strb	r2, [r3, #0]
	while (cislo > 0) {
 80009b0:	e01f      	b.n	80009f2 <num2text+0x86>
		text[15-i] = cislo%10 + '0';
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <num2text+0x128>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	f1c3 000f 	rsb	r0, r3, #15
 80009ba:	88fa      	ldrh	r2, [r7, #6]
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <num2text+0x130>)
 80009be:	fba3 1302 	umull	r1, r3, r3, r2
 80009c2:	08d9      	lsrs	r1, r3, #3
 80009c4:	460b      	mov	r3, r1
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	440b      	add	r3, r1
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3330      	adds	r3, #48	; 0x30
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <num2text+0x12c>)
 80009d8:	541a      	strb	r2, [r3, r0]
		cislo /= 10;
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <num2text+0x130>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	80fb      	strh	r3, [r7, #6]
		i--;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <num2text+0x128>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <num2text+0x128>)
 80009f0:	701a      	strb	r2, [r3, #0]
	for (i=0;i<16;i++) text[i] = '\0';

	if (cislo == 0)	text[0] = '0';

	i = 15;
	while (cislo > 0) {
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1dc      	bne.n	80009b2 <num2text+0x46>
		text[15-i] = cislo%10 + '0';
		cislo /= 10;
		i--;
	}

	i = 15;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <num2text+0x128>)
 80009fa:	220f      	movs	r2, #15
 80009fc:	701a      	strb	r2, [r3, #0]
	while (text[i] == '\0') i--;
 80009fe:	e005      	b.n	8000a0c <num2text+0xa0>
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <num2text+0x128>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <num2text+0x128>)
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <num2text+0x128>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <num2text+0x12c>)
 8000a14:	5c9b      	ldrb	r3, [r3, r2]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0f2      	beq.n	8000a00 <num2text+0x94>

	k = i;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <num2text+0x128>)
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <num2text+0x134>)
 8000a20:	701a      	strb	r2, [r3, #0]

	for (j=0;j<(i+1)/2;j++) {
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <num2text+0x138>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e023      	b.n	8000a72 <num2text+0x106>
		pom = text[j];
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <num2text+0x138>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <num2text+0x12c>)
 8000a32:	5c9a      	ldrb	r2, [r3, r2]
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <num2text+0x13c>)
 8000a36:	701a      	strb	r2, [r3, #0]
		text[j] = text[k];
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <num2text+0x138>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <num2text+0x134>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <num2text+0x12c>)
 8000a46:	5c59      	ldrb	r1, [r3, r1]
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <num2text+0x12c>)
 8000a4a:	5499      	strb	r1, [r3, r2]
		text[k] = pom;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <num2text+0x134>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <num2text+0x13c>)
 8000a54:	7819      	ldrb	r1, [r3, #0]
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <num2text+0x12c>)
 8000a58:	5499      	strb	r1, [r3, r2]
		k--;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <num2text+0x134>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <num2text+0x134>)
 8000a64:	701a      	strb	r2, [r3, #0]
	i = 15;
	while (text[i] == '\0') i--;

	k = i;

	for (j=0;j<(i+1)/2;j++) {
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <num2text+0x138>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <num2text+0x138>)
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <num2text+0x138>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <num2text+0x128>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	0fda      	lsrs	r2, r3, #31
 8000a80:	4413      	add	r3, r2
 8000a82:	105b      	asrs	r3, r3, #1
 8000a84:	4299      	cmp	r1, r3
 8000a86:	dbd0      	blt.n	8000a2a <num2text+0xbe>
		pom = text[j];
		text[j] = text[k];
		text[k] = pom;
		k--;
	}
	return text;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <num2text+0x12c>)
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	2000001c 	.word	0x2000001c
 8000a98:	20000020 	.word	0x20000020
 8000a9c:	cccccccd 	.word	0xcccccccd
 8000aa0:	20000030 	.word	0x20000030
 8000aa4:	20000031 	.word	0x20000031
 8000aa8:	20000032 	.word	0x20000032

08000aac <Delay>:

void Delay(uint32_t nCount)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000ab4:	e002      	b.n	8000abc <Delay+0x10>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1f9      	bne.n	8000ab6 <Delay+0xa>
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <EncoderInit>:


/*
 * 				ROTARY ENCODER INITIALIZATION
 */
void EncoderInit(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
	/*
	 * Enable clocks
	 */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff fd23 	bl	8000520 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000ada:	2101      	movs	r1, #1
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fd3d 	bl	800055c <RCC_APB2PeriphClockCmd>
	 * GPIO_Pin_6 =		Encoder pin "B"
	 * GPIO_Pin_1 =		Encoder pin "A"
	 * GPIO_Pin_0 =		Encoder button
	 * */
	GPIO_InitTypeDef      GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_6;
 8000ae2:	2343      	movs	r3, #67	; 0x43
 8000ae4:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000aea:	2300      	movs	r3, #0
 8000aec:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000af2:	2303      	movs	r3, #3
 8000af4:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4619      	mov	r1, r3
 8000afc:	4820      	ldr	r0, [pc, #128]	; (8000b80 <EncoderInit+0xb4>)
 8000afe:	f7ff fc41 	bl	8000384 <GPIO_Init>
	/*
	 * INTERRUPTS initialization
	 * */
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource1);
 8000b02:	2101      	movs	r1, #1
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fd47 	bl	8000598 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fd43 	bl	8000598 <SYSCFG_EXTILineConfig>

	EXTI_InitStruct.EXTI_Line = EXTI_Line1;
 8000b12:	2302      	movs	r3, #2
 8000b14:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStruct);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fb88 	bl	800023c <EXTI_Init>

	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000b34:	2300      	movs	r3, #0
 8000b36:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStruct);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fb7b 	bl	800023c <EXTI_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI1_IRQn;
 8000b46:	2307      	movs	r3, #7
 8000b48:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = ENCODER_ROTATION_PREEMPTION;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = ENCODER_ROTATION_SUB;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fb0f 	bl	800017c <NVIC_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 8000b5e:	2306      	movs	r3, #6
 8000b60:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = ENCODER_BUTTON_PREEMPTION;
 8000b62:	2300      	movs	r3, #0
 8000b64:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = ENCODER_BUTTON_SUB;
 8000b66:	2302      	movs	r3, #2
 8000b68:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fb03 	bl	800017c <NVIC_Init>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40020000 	.word	0x40020000

08000b84 <EXTI1_IRQHandler>:

/*
 * 				ENCODER ROTATION INTERRUPT HANDLER
 * increments or decrements encoder rotation counter when encoder is turned clockwise or counter-clockwise, respectively
 */
void EXTI1_IRQHandler(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

	if (EXTI_GetITStatus(EXTI_Line1) != RESET) {
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fbc9 	bl	8000320 <EXTI_GetITStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d014      	beq.n	8000bbe <EXTI1_IRQHandler+0x3a>
		if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_6)){
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <EXTI1_IRQHandler+0x40>)
 8000b98:	f7ff fc8a 	bl	80004b0 <GPIO_ReadInputDataBit>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d005      	beq.n	8000bae <EXTI1_IRQHandler+0x2a>
			encoder_rotations++;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <EXTI1_IRQHandler+0x44>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <EXTI1_IRQHandler+0x44>)
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e004      	b.n	8000bb8 <EXTI1_IRQHandler+0x34>
		}
		else {
			encoder_rotations--;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <EXTI1_IRQHandler+0x44>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <EXTI1_IRQHandler+0x44>)
 8000bb6:	6013      	str	r3, [r2, #0]
		}
		EXTI_ClearITPendingBit(EXTI_Line1);
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f7ff fbd5 	bl	8000368 <EXTI_ClearITPendingBit>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	20000034 	.word	0x20000034

08000bcc <EXTI0_IRQHandler>:

/*
 * 				ENCODER BUTTON INTERRUPT HANDLER
 * increments button release counter when button is released
 */
void EXTI0_IRQHandler(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

	if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff fba5 	bl	8000320 <EXTI_GetITStatus>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d009      	beq.n	8000bf0 <EXTI0_IRQHandler+0x24>
			encoder_button++;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <EXTI0_IRQHandler+0x28>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	3301      	adds	r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <EXTI0_IRQHandler+0x28>)
 8000be8:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line0);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff fbbc 	bl	8000368 <EXTI_ClearITPendingBit>
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000038 	.word	0x20000038

08000bf8 <EncoderPosition>:

/*
 * 				ENCODER POSITION
 * returns encoder rotation relative to its rotation when this function was last called
 */
int32_t EncoderPosition(void) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0

	int32_t rotations = encoder_rotations;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <EncoderPosition+0x20>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	607b      	str	r3, [r7, #4]
	encoder_rotations = 0;
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <EncoderPosition+0x20>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
	return rotations;
 8000c0a:	687b      	ldr	r3, [r7, #4]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000034 	.word	0x20000034

08000c1c <EncoderRelease>:

/*
 *				ENCODER BUTTON RELEASE
 * returns number of encoder button releases since this function was last called
 */
uint8_t EncoderRelease(void) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0

	uint8_t releases = encoder_button;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <EncoderRelease+0x20>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
	encoder_button = 0;
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <EncoderRelease+0x20>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
	return releases;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000038 	.word	0x20000038

08000c40 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

	uint16_t otocka = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	80fb      	strh	r3, [r7, #6]

  /* TODO - Add your application code here */

	EncoderInit();
 8000c4a:	f7ff ff3f 	bl	8000acc <EncoderInit>
	DisplayInit();
 8000c4e:	f7ff fce5 	bl	800061c <DisplayInit>
  /* Infinite loop */
  while (1)
  {
	  otocka += EncoderPosition();
 8000c52:	f7ff ffd1 	bl	8000bf8 <EncoderPosition>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	80fb      	strh	r3, [r7, #6]
	  otocka +=EncoderRelease();
 8000c60:	f7ff ffdc 	bl	8000c1c <EncoderRelease>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	80fb      	strh	r3, [r7, #6]
	  DisplayFrequency(otocka);
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fd15 	bl	80006a0 <DisplayFrequency>
  }
 8000c76:	e7ec      	b.n	8000c52 <main+0x12>

08000c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c7e:	e003      	b.n	8000c88 <LoopCopyDataInit>

08000c80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000c82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c86:	3104      	adds	r1, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000c8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c90:	d3f6      	bcc.n	8000c80 <CopyDataInit>
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000c94:	e002      	b.n	8000c9c <LoopFillZerobss>

08000c96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c98:	f842 3b04 	str.w	r3, [r2], #4

08000c9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000c9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ca0:	d3f9      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ca2:	f000 f841 	bl	8000d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f000 f903 	bl	8000eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000caa:	f7ff ffc9 	bl	8000c40 <main>
  bx lr
 8000cae:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb0:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000cb4:	08000f1c 	.word	0x08000f1c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000cbc:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000cc0:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000cc4:	2000003c 	.word	0x2000003c

08000cc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_IRQHandler>
	...

08000ccc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000cdc:	e7fe      	b.n	8000cdc <HardFault_Handler+0x4>
 8000cde:	bf00      	nop

08000ce0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>
 8000ce6:	bf00      	nop

08000ce8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000cec:	e7fe      	b.n	8000cec <BusFault_Handler+0x4>
 8000cee:	bf00      	nop

08000cf0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>
 8000cf6:	bf00      	nop

08000cf8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <SystemInit+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <SystemInit+0x5c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d36:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000d38:	4912      	ldr	r1, [pc, #72]	; (8000d84 <SystemInit+0x5c>)
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <SystemInit+0x5c>)
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <SystemInit+0x60>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000d44:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <SystemInit+0x5c>)
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <SystemInit+0x5c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000d4e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000d52:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <SystemInit+0x5c>)
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <SystemInit+0x5c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000d60:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <SystemInit+0x5c>)
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <SystemInit+0x5c>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000d6a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SystemInit+0x5c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000d72:	f000 f80d 	bl	8000d90 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SystemInit+0x64>)
 8000d78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d7c:	609a      	str	r2, [r3, #8]
#endif
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	88ffc00c 	.word	0x88ffc00c
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d9e:	4a41      	ldr	r2, [pc, #260]	; (8000ea4 <SetSysClock+0x114>)
 8000da0:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <SetSysClock+0x114>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000daa:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <SetSysClock+0x114>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3301      	adds	r3, #1
 8000db8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d103      	bne.n	8000dc8 <SetSysClock+0x38>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000dc6:	d1f0      	bne.n	8000daa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <SetSysClock+0x114>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	e001      	b.n	8000dde <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d15a      	bne.n	8000e9a <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000de4:	4a30      	ldr	r2, [pc, #192]	; (8000ea8 <SetSysClock+0x118>)
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <SetSysClock+0x118>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000df0:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <SetSysClock+0x118>)
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <SetSysClock+0x118>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000dfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ea8 <SetSysClock+0x118>)
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <SetSysClock+0x118>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000e08:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <SetSysClock+0x114>)
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <SetSysClock+0x114>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e12:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <SetSysClock+0x11c>)
 8000e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e1a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000e1c:	bf00      	nop
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <SetSysClock+0x11c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f9      	bne.n	8000e1e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <SetSysClock+0x114>)
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <SetSysClock+0x114>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000e32:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <SetSysClock+0x114>)
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <SetSysClock+0x114>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <SetSysClock+0x114>)
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <SetSysClock+0x114>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <SetSysClock+0x114>)
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <SetSysClock+0x114>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000e4c:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000e4e:	4a15      	ldr	r2, [pc, #84]	; (8000ea4 <SetSysClock+0x114>)
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <SetSysClock+0x114>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000e58:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <SetSysClock+0x114>)
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <SetSysClock+0x114>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e64:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e66:	bf00      	nop
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <SetSysClock+0x114>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f9      	beq.n	8000e68 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <SetSysClock+0x114>)
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <SetSysClock+0x114>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f023 0303 	bic.w	r3, r3, #3
 8000e7e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000e80:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <SetSysClock+0x114>)
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <SetSysClock+0x114>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f043 0303 	orr.w	r3, r3, #3
 8000e8a:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000e8c:	bf00      	nop
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SetSysClock+0x114>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	2b0c      	cmp	r3, #12
 8000e98:	d1f9      	bne.n	8000e8e <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40023c00 	.word	0x40023c00
 8000eac:	40007000 	.word	0x40007000

08000eb0 <__libc_init_array>:
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <__libc_init_array+0x3c>)
 8000eb2:	b570      	push	{r4, r5, r6, lr}
 8000eb4:	461e      	mov	r6, r3
 8000eb6:	4c0e      	ldr	r4, [pc, #56]	; (8000ef0 <__libc_init_array+0x40>)
 8000eb8:	2500      	movs	r5, #0
 8000eba:	1ae4      	subs	r4, r4, r3
 8000ebc:	10a4      	asrs	r4, r4, #2
 8000ebe:	42a5      	cmp	r5, r4
 8000ec0:	d004      	beq.n	8000ecc <__libc_init_array+0x1c>
 8000ec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec6:	4798      	blx	r3
 8000ec8:	3501      	adds	r5, #1
 8000eca:	e7f8      	b.n	8000ebe <__libc_init_array+0xe>
 8000ecc:	f000 f816 	bl	8000efc <_init>
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <__libc_init_array+0x44>)
 8000ed2:	4c09      	ldr	r4, [pc, #36]	; (8000ef8 <__libc_init_array+0x48>)
 8000ed4:	461e      	mov	r6, r3
 8000ed6:	1ae4      	subs	r4, r4, r3
 8000ed8:	10a4      	asrs	r4, r4, #2
 8000eda:	2500      	movs	r5, #0
 8000edc:	42a5      	cmp	r5, r4
 8000ede:	d004      	beq.n	8000eea <__libc_init_array+0x3a>
 8000ee0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ee4:	4798      	blx	r3
 8000ee6:	3501      	adds	r5, #1
 8000ee8:	e7f8      	b.n	8000edc <__libc_init_array+0x2c>
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	08000f14 	.word	0x08000f14
 8000ef0:	08000f14 	.word	0x08000f14
 8000ef4:	08000f14 	.word	0x08000f14
 8000ef8:	08000f18 	.word	0x08000f18

08000efc <_init>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	bf00      	nop
 8000f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f02:	bc08      	pop	{r3}
 8000f04:	469e      	mov	lr, r3
 8000f06:	4770      	bx	lr

08000f08 <_fini>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	bf00      	nop
 8000f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0e:	bc08      	pop	{r3}
 8000f10:	469e      	mov	lr, r3
 8000f12:	4770      	bx	lr
